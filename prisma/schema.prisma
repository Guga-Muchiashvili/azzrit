generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Table {
  title          String
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  creatorId      String         @map("creator_id") @db.ObjectId
  tableType      String
  gameMode       String
  playerCount    Int
  gameStarted    Boolean
  waitingPlayers TableRequest[] @relation("WaitingRequests")
  players        User[]         @relation("TablePlayers")

  @@index([creatorId])
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  table         Table?         @relation("TablePlayers", fields: [tableId], references: [id])
  tableId       String?        @db.ObjectId
  requests      TableRequest[]

  @@index([tableId])
}

model TableRequest {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  tableId String @db.ObjectId
  userId  String @db.ObjectId
  status  String
  table   Table  @relation("WaitingRequests", fields: [tableId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([tableId, userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

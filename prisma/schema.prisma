generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Table {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  creatorId      String  @map("creator_id") @db.ObjectId
  tableType      String
  gameMode       String
  playerCount    Int
  gameStarted    Boolean
  waitingPlayers String  @default("[]")
  players        String  @default("[]")
  creator        User    @relation("TableCreator", fields: [creatorId], references: [id])
  User           User?   @relation(fields: [userId], references: [id])
  userId         String? @db.ObjectId
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  createdTables  Table[]   @relation("TableCreator")
  Table          Table[]
  tableId        String?
  acceptedTables String    @default("[]")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
